object CheckCommand "disks_snmp" {
	import "ipv4-or-ipv6"

	command = [ CustomPluginsDir + "/check_disks_snmp.pl" ]

	arguments = {
		"-w" = {
			value = "$disk_wfree$"
			description = "Exit with WARNING status if less than INTEGER units of disk are free or Exit with WARNING status if less than PERCENT of disk space is free"
			required = true
			order = -3
		}

		"-c" = {
			value = "$disk_cfree$"
			description = "Exit with CRITICAL status if less than INTEGER units of disk are free or Exit with CRITCAL status if less than PERCENT of disk space is free"
			required = true
			order = -3
		}

		"-W" = {
			value = "$disk_inode_wfree$"
			description = "Exit with WARNING status if less than PERCENT of inode space is free"
			required = true
			order = -3
		}

		"-C" = {
			value = "$disk_inode_cfree$"
			description = "Exit with CRITICAL status if less than PERCENT of inode space is free"
			required = true
			order = -3
		}

		"-T" = {
			value = "$disk_timeout$"
			description = "Seconds before connection times out (default: 15)"
		}

                "-H" = {
                        value = "$disk_address$"
                        description = "The server to query"
                }

                "-P" = {
                        value = "$disk_port$"
                        description = "The port to query"
		}

		"-f" = {
			set_if = "$disk_perfdata$"
			description = "Show performance data. Default to true"
		}

		"-p" = {
			value = "$disk_snmp_community$"
			description = "SNMP community"
			required = true
		}

		"-2" = {
			set_if = "$disk_snmp_v2$"
			description = "Use SNMP v2"
		}
	}

	vars.disk_wfree = "80"
	vars.disk_cfree = "90"
        vars.disk_inode_wfree = "40"
        vars.disk_inode_cfree = "60"
	vars.disk_timeout = "15"
	vars.disk_address = "$check_address$"
	vars.disk_port = "161"
        vars.disk_perfdata = "true"
	vars.disk_snmp_v2 = "false"
        vars.disk_snmp_community = SnmpCommunity
}

apply Service "disks" {
  import "generic-service"

  check_command = "disks_snmp"

  assign where (host.address || host.address6) && host.vars.os == "Linux"
}
